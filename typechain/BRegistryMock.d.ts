/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BRegistryMockInterface extends ethers.utils.Interface {
  functions: {
    "ETH_TOKEN_ADDRESS()": FunctionFragment;
    "emptyOnAsset()": FunctionFragment;
    "getBestPoolsWithLimit(address,address,uint256)": FunctionFragment;
    "setEmptyOnAsset(bool)": FunctionFragment;
    "setPools(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emptyOnAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBestPoolsWithLimit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmptyOnAsset",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setPools", values: [string[]]): string;

  decodeFunctionResult(
    functionFragment: "ETH_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emptyOnAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestPoolsWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmptyOnAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPools", data: BytesLike): Result;

  events: {};
}

export class BRegistryMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BRegistryMockInterface;

  functions: {
    ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "ETH_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;

    emptyOnAsset(overrides?: CallOverrides): Promise<[boolean]>;

    "emptyOnAsset()"(overrides?: CallOverrides): Promise<[boolean]>;

    getBestPoolsWithLimit(
      fromToken: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getBestPoolsWithLimit(address,address,uint256)"(
      fromToken: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    setEmptyOnAsset(
      empty: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEmptyOnAsset(bool)"(
      empty: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPools(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPools(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "ETH_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  emptyOnAsset(overrides?: CallOverrides): Promise<boolean>;

  "emptyOnAsset()"(overrides?: CallOverrides): Promise<boolean>;

  getBestPoolsWithLimit(
    fromToken: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getBestPoolsWithLimit(address,address,uint256)"(
    fromToken: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  setEmptyOnAsset(
    empty: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEmptyOnAsset(bool)"(
    empty: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPools(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPools(address[])"(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "ETH_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    emptyOnAsset(overrides?: CallOverrides): Promise<boolean>;

    "emptyOnAsset()"(overrides?: CallOverrides): Promise<boolean>;

    getBestPoolsWithLimit(
      fromToken: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getBestPoolsWithLimit(address,address,uint256)"(
      fromToken: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    setEmptyOnAsset(empty: boolean, overrides?: CallOverrides): Promise<void>;

    "setEmptyOnAsset(bool)"(
      empty: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPools(_pools: string[], overrides?: CallOverrides): Promise<void>;

    "setPools(address[])"(
      _pools: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "ETH_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    emptyOnAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "emptyOnAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBestPoolsWithLimit(
      fromToken: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestPoolsWithLimit(address,address,uint256)"(
      fromToken: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEmptyOnAsset(
      empty: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEmptyOnAsset(bool)"(
      empty: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPools(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPools(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETH_TOKEN_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emptyOnAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emptyOnAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBestPoolsWithLimit(
      fromToken: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestPoolsWithLimit(address,address,uint256)"(
      fromToken: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEmptyOnAsset(
      empty: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEmptyOnAsset(bool)"(
      empty: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPools(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPools(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
