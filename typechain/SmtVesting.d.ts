/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SmtVestingInterface extends ethers.utils.Interface {
  functions: {
    "blockWeek(uint256)": FunctionFragment;
    "blockYear(uint256)": FunctionFragment;
    "currentYear()": FunctionFragment;
    "currentYearWeek()": FunctionFragment;
    "initialBlock()": FunctionFragment;
    "lastClaimedBlock()": FunctionFragment;
    "lastYCBClaimed()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "token()": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "weeklyRedPerc(uint256)": FunctionFragment;
    "yearAnualCommunityBatch(uint256)": FunctionFragment;
    "yearAnualDistribution(uint256)": FunctionFragment;
    "yearAnualWeeklyBatch(uint256)": FunctionFragment;
    "yearFirstBlock(uint256)": FunctionFragment;
    "yearFrontWeightedWRB(uint256)": FunctionFragment;
    "yearWeekFirstBlock(uint256,uint256)": FunctionFragment;
    "yearWeekLastBlock(uint256,uint256)": FunctionFragment;
    "yearWeekRelaseBatch(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentYearWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastYCBClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setToken", values: [string]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyRedPerc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yearAnualCommunityBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yearAnualDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yearAnualWeeklyBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yearFirstBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yearFrontWeightedWRB",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yearWeekFirstBlock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yearWeekLastBlock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yearWeekRelaseBatch",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "blockWeek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blockYear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentYearWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastYCBClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyRedPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yearAnualCommunityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yearAnualDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yearAnualWeeklyBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yearFirstBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yearFrontWeightedWRB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yearWeekFirstBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yearWeekLastBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yearWeekRelaseBatch",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class SmtVesting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SmtVestingInterface;

  functions: {
    blockWeek(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "blockWeek(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blockYear(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "blockYear(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentYear()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentYearWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentYearWeek()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "initialBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastClaimedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastClaimedBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastYCBClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastYCBClaimed()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalClaimed()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weeklyRedPerc(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "weeklyRedPerc(uint256)"(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yearAnualCommunityBatch(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "yearAnualCommunityBatch(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yearAnualDistribution(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "yearAnualDistribution(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yearAnualWeeklyBatch(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "yearAnualWeeklyBatch(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yearFirstBlock(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "yearFirstBlock(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yearFrontWeightedWRB(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "yearFrontWeightedWRB(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yearWeekFirstBlock(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "yearWeekFirstBlock(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yearWeekLastBlock(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "yearWeekLastBlock(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yearWeekRelaseBatch(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "yearWeekRelaseBatch(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  blockWeek(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "blockWeek(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blockYear(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "blockYear(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentYear(overrides?: CallOverrides): Promise<BigNumber>;

  "currentYear()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentYearWeek(overrides?: CallOverrides): Promise<BigNumber>;

  "currentYearWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "initialBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastClaimedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastClaimedBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastYCBClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  "lastYCBClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  "totalClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weeklyRedPerc(
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "weeklyRedPerc(uint256)"(
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yearAnualCommunityBatch(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "yearAnualCommunityBatch(uint256)"(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yearAnualDistribution(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "yearAnualDistribution(uint256)"(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yearAnualWeeklyBatch(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "yearAnualWeeklyBatch(uint256)"(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yearFirstBlock(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "yearFirstBlock(uint256)"(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yearFrontWeightedWRB(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "yearFrontWeightedWRB(uint256)"(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yearWeekFirstBlock(
    year: BigNumberish,
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "yearWeekFirstBlock(uint256,uint256)"(
    year: BigNumberish,
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yearWeekLastBlock(
    year: BigNumberish,
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "yearWeekLastBlock(uint256,uint256)"(
    year: BigNumberish,
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yearWeekRelaseBatch(
    year: BigNumberish,
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "yearWeekRelaseBatch(uint256,uint256)"(
    year: BigNumberish,
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    blockWeek(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockWeek(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockYear(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockYear(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentYear(overrides?: CallOverrides): Promise<BigNumber>;

    "currentYear()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentYearWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "currentYearWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "initialBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastClaimedBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastYCBClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "lastYCBClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "setToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "totalClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weeklyRedPerc(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "weeklyRedPerc(uint256)"(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearAnualCommunityBatch(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearAnualCommunityBatch(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearAnualDistribution(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearAnualDistribution(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearAnualWeeklyBatch(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearAnualWeeklyBatch(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearFirstBlock(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearFirstBlock(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearFrontWeightedWRB(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearFrontWeightedWRB(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearWeekFirstBlock(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearWeekFirstBlock(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearWeekLastBlock(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearWeekLastBlock(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearWeekRelaseBatch(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearWeekRelaseBatch(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    blockWeek(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockWeek(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockYear(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockYear(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentYear(overrides?: CallOverrides): Promise<BigNumber>;

    "currentYear()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentYearWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "currentYearWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "initialBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastClaimedBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastYCBClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "lastYCBClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "totalClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weeklyRedPerc(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "weeklyRedPerc(uint256)"(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearAnualCommunityBatch(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearAnualCommunityBatch(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearAnualDistribution(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearAnualDistribution(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearAnualWeeklyBatch(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearAnualWeeklyBatch(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearFirstBlock(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearFirstBlock(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearFrontWeightedWRB(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearFrontWeightedWRB(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearWeekFirstBlock(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearWeekFirstBlock(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearWeekLastBlock(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearWeekLastBlock(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yearWeekRelaseBatch(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yearWeekRelaseBatch(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockWeek(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blockWeek(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockYear(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blockYear(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentYear()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentYearWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentYearWeek()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastClaimedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastClaimedBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastYCBClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastYCBClaimed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalClaimed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weeklyRedPerc(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "weeklyRedPerc(uint256)"(
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yearAnualCommunityBatch(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yearAnualCommunityBatch(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yearAnualDistribution(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yearAnualDistribution(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yearAnualWeeklyBatch(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yearAnualWeeklyBatch(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yearFirstBlock(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yearFirstBlock(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yearFrontWeightedWRB(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yearFrontWeightedWRB(uint256)"(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yearWeekFirstBlock(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yearWeekFirstBlock(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yearWeekLastBlock(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yearWeekLastBlock(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yearWeekRelaseBatch(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yearWeekRelaseBatch(uint256,uint256)"(
      year: BigNumberish,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
