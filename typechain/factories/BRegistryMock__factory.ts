/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { BRegistryMock } from "../BRegistryMock";

export class BRegistryMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BRegistryMock> {
    return super.deploy(overrides || {}) as Promise<BRegistryMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BRegistryMock {
    return super.attach(address) as BRegistryMock;
  }
  connect(signer: Signer): BRegistryMock__factory {
    return super.connect(signer) as BRegistryMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BRegistryMock {
    return new Contract(address, _abi, signerOrProvider) as BRegistryMock;
  }
}

const _abi = [
  {
    inputs: [],
    name: "ETH_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "emptyOnAsset",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getBestPoolsWithLimit",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "empty",
        type: "bool",
      },
    ],
    name: "setEmptyOnAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_pools",
        type: "address[]",
      },
    ],
    name: "setPools",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526002805460ff1916905534801561001a57600080fd5b506104c58061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631878d1f11461005c578063273c07e6146100805780638544c53b1461009c578063929c45e014610141578063bfdbfc4314610160575b600080fd5b6100646101e6565b604080516001600160a01b039092168252519081900360200190f35b6100886101fe565b604080519115158252519081900360200190f35b61013f600480360360208110156100b257600080fd5b8101906020810181356401000000008111156100cd57600080fd5b8201836020820111156100df57600080fd5b8035906020019184602083028401116401000000008311171561010157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610207945050505050565b005b61013f6004803603602081101561015757600080fd5b503515156102b3565b6101966004803603606081101561017657600080fd5b506001600160a01b038135811691602081013590911690604001356102c6565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101d25781810151838201526020016101ba565b505050509050019250505060405180910390f35b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60025460ff1681565b6000815167ffffffffffffffff8111801561022157600080fd5b5060405190808252806020026020018201604052801561024b578160200160208202803683370190505b50905060005b825181101561029a5782818151811061026657fe5b602002602001015182828151811061027a57fe5b6001600160a01b0390921660209283029190910190910152600101610251565b5080516102ae906000906020840190610415565b505050565b6002805460ff1916911515919091179055565b60025460609060ff1680156102f857506001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14155b1561035f57600180548060200260200160405190810160405280929190818152602001828054801561035357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610335575b5050505050905061040e565b6000805467ffffffffffffffff8111801561037957600080fd5b506040519080825280602002602001820160405280156103a3578160200160208202803683370190505b50905060005b60005481101561040a57600081815481106103c057fe5b9060005260206000200160009054906101000a90046001600160a01b03168282815181106103ea57fe5b6001600160a01b03909216602092830291909101909101526001016103a9565b5090505b9392505050565b82805482825590600052602060002090810192821561046a579160200282015b8281111561046a57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610435565b5061047692915061047a565b5090565b5b80821115610476576000815560010161047b56fea26469706673582212204b62034d5b4930cfe727528ceb6d42daff7834c2d5965794f719ff8a7c65989164736f6c63430007060033";
