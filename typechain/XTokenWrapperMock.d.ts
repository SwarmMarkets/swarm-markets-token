/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface XTokenWrapperMockInterface extends ethers.utils.Interface {
  functions: {
    "ETH_TOKEN_ADDRESS()": FunctionFragment;
    "tokenToXToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToXToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToXToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class XTokenWrapperMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: XTokenWrapperMockInterface;

  functions: {
    ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "ETH_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;

    tokenToXToken(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "tokenToXToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "ETH_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  tokenToXToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  "tokenToXToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "ETH_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    tokenToXToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    "tokenToXToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "ETH_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToXToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenToXToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETH_TOKEN_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToXToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenToXToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
