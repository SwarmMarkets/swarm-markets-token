/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SmtPriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "ONE()": FunctionFragment;
    "WETH_ADDRESS()": FunctionFragment;
    "calculateAmount(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "eurPriceFeed()": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "latestAnswer()": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEurPriceFeed(address)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setSmt(address)": FunctionFragment;
    "setXTokenWrapper(address)": FunctionFragment;
    "smt()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "xTokenWrapper()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eurPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEurPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(functionFragment: "setSmt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setXTokenWrapper",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "smt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "xTokenWrapper",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSmt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setXTokenWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "smt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xTokenWrapper",
    data: BytesLike
  ): Result;

  events: {
    "EurPriceFeedSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegistrySet(address)": EventFragment;
    "SmtSet(address)": EventFragment;
    "XTokenWrapperSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EurPriceFeedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmtSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XTokenWrapperSet"): EventFragment;
}

export class SmtPriceFeed extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SmtPriceFeedInterface;

  functions: {
    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ONE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "WETH_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;

    calculateAmount(
      _asset: string,
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateAmount(address,uint256)"(
      _asset: string,
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "decimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    eurPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<[string]>;

    getPrice(_asset: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPrice(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    latestAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    "latestAnswer()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSmt(
      _smt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSmt(address)"(
      _smt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    smt(overrides?: CallOverrides): Promise<[string]>;

    "smt()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xTokenWrapper(overrides?: CallOverrides): Promise<[string]>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<[string]>;
  };

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  WETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "WETH_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  calculateAmount(
    _asset: string,
    _assetAmountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateAmount(address,uint256)"(
    _asset: string,
    _assetAmountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  eurPriceFeed(overrides?: CallOverrides): Promise<string>;

  "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

  getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getPrice(address)"(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  "latestAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEurPriceFeed(
    _eurPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEurPriceFeed(address)"(
    _eurPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRegistry(address)"(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSmt(
    _smt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSmt(address)"(
    _smt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setXTokenWrapper(
    _xTokenWrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setXTokenWrapper(address)"(
    _xTokenWrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  smt(overrides?: CallOverrides): Promise<string>;

  "smt()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xTokenWrapper(overrides?: CallOverrides): Promise<string>;

  "xTokenWrapper()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "WETH_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    calculateAmount(
      _asset: string,
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAmount(address,uint256)"(
      _asset: string,
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    eurPriceFeed(overrides?: CallOverrides): Promise<string>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

    getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSmt(_smt: string, overrides?: CallOverrides): Promise<void>;

    "setSmt(address)"(_smt: string, overrides?: CallOverrides): Promise<void>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    smt(overrides?: CallOverrides): Promise<string>;

    "smt()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    xTokenWrapper(overrides?: CallOverrides): Promise<string>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    EurPriceFeedSet(
      eurPriceFeed: null
    ): TypedEventFilter<[string], { eurPriceFeed: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RegistrySet(
      registry: null
    ): TypedEventFilter<[string], { registry: string }>;

    SmtSet(smt: null): TypedEventFilter<[string], { smt: string }>;

    XTokenWrapperSet(
      xTokenWrapper: null
    ): TypedEventFilter<[string], { xTokenWrapper: string }>;
  };

  estimateGas: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAmount(
      _asset: string,
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAmount(address,uint256)"(
      _asset: string,
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    eurPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSmt(
      _smt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSmt(address)"(
      _smt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    smt(overrides?: CallOverrides): Promise<BigNumber>;

    "smt()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xTokenWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH_ADDRESS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateAmount(
      _asset: string,
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateAmount(address,uint256)"(
      _asset: string,
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eurPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "latestAnswer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSmt(
      _smt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSmt(address)"(
      _smt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    smt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "smt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xTokenWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
